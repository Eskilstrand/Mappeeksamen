library(readxl)
library(tidyr)
library(exscidata)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(magrittr)
library(gt)
library(ggtext)
library(pwr)
# Chunk 2
#| echo: false
set.seed(1)
population <- rnorm(1000000, mean = 1.5, sd = 3)
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
# Skjul summary-output
invisible(summary(m1))
invisible(summary(m2))
# Chunk 3
#| code-fold: true
#| message: false
#| warning: false
# Create data frames to store the model estimates
results_8 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 8)
results_40 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 40)
# A for loop used to sample 1000 studies, each iteration (i) will draw a new sample
# from the population.
for(i in 1:1000) {
# Draw a sample
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
# Model the data
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
# Extract values from the models
results_8[i, 1] <- coef(summary(m1))[1, 1]
results_8[i, 2] <- coef(summary(m1))[1, 2]
results_8[i, 3] <- coef(summary(m1))[1, 4]
results_40[i, 1] <- coef(summary(m2))[1, 1]
results_40[i, 2] <- coef(summary(m2))[1, 2]
results_40[i, 3] <- coef(summary(m2))[1, 4]
}
# Save the results in a combined data frame
results <- bind_rows(results_8, results_40)
# Calculate standard deviation of the estimate and the average of the standard error (se)
results_summary <- results |>
group_by(n) |>
summarise(
sd_estimate = sd(estimate),
avg_se = mean(se)
)
gt(results_summary)
sd_est_8 <- sd(results$estimate[results$n == 8])
avg_se_8 <- mean(results$se[results$n == 8])
sd_est_40 <- sd(results$estimate[results$n == 40])
avg_se_40 <- mean(results$se[results$n == 40])
rounded_sd_est_8 <- round(sd_est_8, 2)
rounded_avg_se_8 <- round(avg_se_8, 2)
rounded_sd_est_40 <- round(sd_est_40, 2)
rounded_avg_se_40 <- round(avg_se_40, 2)
# Chunk 4: "P-verdi histogram SS8"
#| code-fold: true
#| label: "P-verdi histogram SS8"
ggplot(results[results$n == 8, ], aes(x = pval)) +
geom_histogram(binwidth = 0.05, fill = "green", alpha = 0.6) +
labs(title = "P-verdier fordeling til samplesize 8",
x = "P-verdier",
y = "frekvens") +
theme_minimal()
# Chunk 5: "P-verdi histogram SS40"
#| code-fold: true
#| label: "P-verdi histogram SS40"
ggplot(results[results$n == 40, ], aes(x = pval)) +
geom_histogram(binwidth = 0.05, fill = "green", alpha = 0.6) +
labs(title = "P-verdier fordeling til samplesize 40",
x = "P-verdier",
y = "frekvens") +
theme_classic()
# Chunk 6: "Calculate number of studies with stat signif"
#| code-fold: true
#| label: "Calculate number of studies with stat signif"
alpha <- 0.05
significant_8 <- sum(results$pval[results$n == 8] < alpha)
significant_40 <- sum(results$pval[results$n == 40] < alpha)
# Chunk 7: "Utregning av stat power"
#| code-fold: true
#| label: "Utregning av stat power"
effect_size <- 1.5 / 3
power_8 <- pwr.t.test(n = 8,
d = effect_size,
sig.level = alpha,
type = "one.sample")$power
rounded_power_8 <- round(power_8, 3)
power_40 <- pwr.t.test(n = 40,
d = effect_size,
sig.level = alpha,
type = "one.sample")$power
rounded_power_40 <- round(power_40, 3)
rounded_power_40_perc <- rounded_power_40 * 100
# Chunk 8: "Siste oppgave"
#| code-fold: true
#| label: "Siste oppgave"
set.seed(1)
population <- rnorm(1000000, mean = 0, sd = 3)
# Create data frames to store the model estimates
results_8 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 8)
results_40 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 40)
# A for loop used to sample 1000 studies, each iteration (i) will draw a new sample
# from the population.
for(i in 1:1000) {
# Draw a sample
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
# Model the data
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
# Extract values from the models
results_8[i, 1] <- coef(summary(m1))[1, 1]
results_8[i, 2] <- coef(summary(m1))[1, 2]
results_8[i, 3] <- coef(summary(m1))[1, 4]
results_40[i, 1] <- coef(summary(m2))[1, 1]
results_40[i, 2] <- coef(summary(m2))[1, 2]
results_40[i, 3] <- coef(summary(m2))[1, 4]
}
# Save the results in a combined data frame
results_null <- bind_rows(results_8, results_40)
# Chunk 9: "Falske positive"
#| code-fold: true
#| label: "Falske positive"
false_positive_8 <- sum(results_8$pval < 0.05)
false_positive_40 <- sum(results_40$pval < 0.05)
false_positive_8_alpha0.025 <- sum(results_8$pval < 0.025)
false_positive_40_alpha0.025 <- sum(results_40$pval < 0.025)
gt(results_summary)
#| code-fold: true
#| message: false
#| warning: false
# Create data frames to store the model estimates
results_8 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 8)
results_40 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 40)
# A for loop used to sample 1000 studies, each iteration (i) will draw a new sample
# from the population.
for(i in 1:1000) {
# Draw a sample
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
# Model the data
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
# Extract values from the models
results_8[i, 1] <- coef(summary(m1))[1, 1]
results_8[i, 2] <- coef(summary(m1))[1, 2]
results_8[i, 3] <- coef(summary(m1))[1, 4]
results_40[i, 1] <- coef(summary(m2))[1, 1]
results_40[i, 2] <- coef(summary(m2))[1, 2]
results_40[i, 3] <- coef(summary(m2))[1, 4]
}
# Save the results in a combined data frame
results <- bind_rows(results_8, results_40)
# Calculate standard deviation of the estimate and the average of the standard error (se)
results_summary <- results |>
group_by(n) |>
summarise(
sd_estimate = sd(estimate),
avg_se = mean(se)
)
sd_est_8 <- sd(results$estimate[results$n == 8])
avg_se_8 <- mean(results$se[results$n == 8])
sd_est_40 <- sd(results$estimate[results$n == 40])
avg_se_40 <- mean(results$se[results$n == 40])
rounded_sd_est_8 <- round(sd_est_8, 2)
rounded_avg_se_8 <- round(avg_se_8, 2)
rounded_sd_est_40 <- round(sd_est_40, 2)
rounded_avg_se_40 <- round(avg_se_40, 2)
# Chunk 1: "Laste pakker og data, samt statistikk mager masse"
#| label: "Laste pakker og data, samt statistikk mager masse"
#| output: false
## laste pakker
library(tidyverse); library(exscidata); library(lme4); library(gt)
leanmass <- dxadata |>
select(participant:include,
lean.left_leg,
lean.right_leg) |>
pivot_longer(names_to = "leg",
values_to = "lean.mass",
cols = lean.left_leg:lean.right_leg) |>
mutate(leg = if_else(leg == "lean.left_leg", "L", "R"),
sets = if_else(multiple == leg, "multiple", "single")) |>
select(participant, time, sex,
include, sets, leg, lean.mass) |>
filter(include == "incl") |>
mutate(time = factor(time, levels = c("pre", "post")),
sets = factor(sets, levels = c("single", "multiple"))) |>
print()
leanmass_change_wide <- leanmass |>
pivot_wider(names_from = time,
values_from = lean.mass) |>
mutate(change = post - pre) |>
select(participant, sex, sets, change) |>
pivot_wider(names_from = sets,
values_from = change) |>
mutate(diff = multiple - single) |>
print()
# Lineær modell
m1 <- lm(diff ~ 1, data = leanmass_change_wide)
summary(m1)
### Hente ut data fra modellen:
# Den enkle lineære modellen (m1) er en lineær modell av forskjell i forskjellene mellom multiple og single.
m1pval <- round(coef(summary(m1))[1, 4], 2)
m1est <- round(coef(summary(m1))[1, 1], 2)
## Øvre (m1ciu) og nedre (m1cil) konfidensintervall, round-funksjonen brukes for å bestemme antall desimaler
m1ciu <- round(confint(m1)[1, 2], 2)
m1cil <- round(confint(m1)[1, 1], 2)
m1results <- paste0(m1est,
" (95 % KI: [",
m1cil,
"-",
m1ciu,
"], p = ",
m1pval, ")"
)
# Chunk 2: "Statistikk på forskjell i styrke"
#| label: "Statistikk på forskjell i styrke"
#| output: false
## Utforskende plot av styrkedata
str <- strengthvolume |>
filter(include == "incl") |>
mutate(time = factor(time, levels = c("pre", "session1",
"week2", "week5",
"week9", "post"))) |>
print()
# Har ikke skjedd noe foreløpig annet enn at bare de som fullførte nok trening (85 %) er inkludert, og time er gjort om til faktorvariabel
## benytter pre&post
## kombin predat
styrke <- str |>
mutate(time = if_else(time %in% c("pre", "session1"),
"pre", time)) |>
filter(time %in% c("pre", "post")) |>
summarise(load = mean(load, na.rm = TRUE),
.by = c(participant,
sex,
time,
sets,
exercise,
leg)) |>
print()
## Er bare interessert i beinpress og kneekstensjon og vil gjøre datasettet håndterbart for en lineær modell
# BP
styrke_legpress <- styrke |>
filter(exercise == "legpress") |>
pivot_wider(names_from = time,
values_from = load) |>
mutate(endring = post - pre) |>
select(participant, sex, sets, endring) |>
pivot_wider(names_from = sets,
values_from = endring) |>
mutate(diff = multiple - single) |>
print()
## KE
styrke_ext <- styrke |>
filter(exercise == "legext") |>
pivot_wider(names_from = time,
values_from = load) |>
mutate(endring = post - pre) |>
select(participant, sex, sets, endring) |>
pivot_wider(names_from = sets,
values_from = endring) |>
mutate(diff = multiple - single) |>
print()
## Gjøre enkle lineære modeller:
# BP
mod_press <- lm(diff ~ 1, data = styrke_legpress)
summary(mod_press)
# mangler 3 diff, mangler data
# KE
mod_ext <- lm(diff ~ 1, data = styrke_ext)
summary(mod_ext)
# her mangler 2 differanser
### Ønsker å presentere resultatene
mod_press_pval <- round(coef(summary(mod_press))[1, 4], 3)
mod_press_est <- round(coef(summary(mod_press))[1, 1], 2)
mod_ext_pval <- round(coef(summary(mod_ext))[1, 4], 3)
mod_ext_est <- round(coef(summary(mod_ext))[1, 1], 2)
## KI
mod_press_cil <- round(confint(mod_press)[1, 1], 1)
mod_press_ciu <- round(confint(mod_press)[1, 2], 1)
mod_ext_cil <- round(confint(mod_ext)[1, 1], 1)
mod_ext_ciu <- round(confint(mod_ext)[1, 2], 1)
## Presentabelt
mod_press_results <- paste0(mod_press_est,
" (95 % KI: [",
mod_press_cil,
"-",
mod_press_ciu,
"], p = ",
mod_press_pval, ")"
)
mod_ext_results <- paste0(mod_ext_est,
" (95 % KI: [",
mod_ext_cil,
"-",
mod_ext_ciu,
"], p = ",
mod_ext_pval, ")"
)
# Chunk 3: "Lage tabell"
#| label: "Lage tabell"
#| output: false
## Vil ha pre-verdier, gjennomsnitt og standardavvik av mager masse per condition (single vs. multiple)
lean <- leanmass |>
filter(time == "pre") |>
summarise(m_lean = mean(lean.mass),
sd_lean = sd(lean.mass),
miss_val = sum(is.na(lean.mass)),
n = n(),
.by = sets) |>
select(sets:sd_lean) |>
print()
## BP
press <- strengthvolume |>
filter(include == "incl",
exercise == "legpress",
time == c("pre", "post")) |>
summarise(m_press = mean(load, na.rm = TRUE),
sd_press = sd(load, na.rm = TRUE),
miss_val = sum(is.na(load)),
n = n(),
.by = sets) |>
select(sets:sd_press) |>
print()
## KE
ext <- strengthvolume |>
filter(include == "incl",
exercise == "legext",
time == c("pre", "post")) |>
summarise(m_ext = mean(load, na.rm = TRUE),
sd_ext = sd(load, na.rm = TRUE),
miss_val = sum(is.na(load)),
n = n(),
.by = sets) |>
select(sets:sd_ext) |>
print()
## Slå alt sammen bortover slik at jeg i gt-funksjonen kan slå sammen gjennomsnitt og standardavvik i en kolonne
tbl <- right_join(lean, press, by = "sets") |>
right_join(ext, by = "sets")
# Chunk 4: tbl-pre
#| label: tbl-pre
#| tbl-cap: Resultater fra pre-test
tbl |>
gt() |>
fmt_number(columns = m_lean:sd_ext,
decimals = 1) |>
cols_merge(columns = c(m_lean, sd_lean),
pattern = "{1} \u00B1 {2}") |>
cols_merge(columns = c(m_press, sd_press),
pattern = "{1} \u00B1 {2}") |>
cols_merge(columns = c(m_ext, sd_ext),
pattern = "{1} \u00B1 {2}") |>
cols_label(sets = "Volum",
m_lean = "Magermasse (g)",
m_press = "Beinpress (kg)",
m_ext = "Kneekstensjon (kg)") |>
tab_footnote(footnote = md("*Data er presentert som gjennomsnitt &plusmn; standardavvik.*"))
# Chunk 5: "Slå sammen datasett for å lage figur"
#| label: "Slå sammen datasett for å lage figur"
#| output: false
## Ønsker å lage en figur der jeg sammenligner økning i beinpress med økning i muskelmasse, vil sammenligne prosentvis endring
styrke_join <- styrke |>
filter(exercise == "legpress") |>
pivot_wider(names_from = time,
values_from = load) |>
mutate(endring_load = (post - pre)*100/post) |>
select(participant, sex, sets, endring_load) |>
print()
## Det samme som ovenfor, men for mager masse
leanmass_join <- leanmass |>
filter(time %in% c("pre", "post")) |>
pivot_wider(names_from = time,
values_from = lean.mass) |>
mutate(endring_lean.mass = (post - pre)*100/post, na.rm = TRUE) |>
select(participant, sex, sets, endring_lean.mass) |>
print()
## Slå sammen datasettene
joined_dat <- inner_join(styrke_join, leanmass_join,
by = c("participant", "sex", "sets")) |>
print()
## Gjøre en lineær modell, der jeg sette mage masse som prediktor variabel. Vil ha p-verdi og R
styrke_masse_mod <- lm(endring_lean.mass ~ endring_load, data = joined_dat)
summary(styrke_masse_mod)
## Spare verdiene i objekter
r_squared <- round(summary(styrke_masse_mod)$r.squared, 3)
p_val_styrke_masse <- round(coef(summary(styrke_masse_mod))[2, 4], 2)
## Kombinere verdiene slik jeg vil bruke dem i teksten
results_styrke_masse <- paste0("(R = ",
r_squared,
" & p = ",
p_val_styrke_masse,
")")
# Chunk 6: fig-figur1
#| label: fig-figur1
#| fig-cap: Figur som viser en lineær regresjonsmodell med endring i muskelmasse som prediktor variabel for endring i 1RM beinpress.
joined_dat |>
ggplot(aes(endring_lean.mass, endring_load)) +
geom_point() + geom_smooth(method = "lm", se = FALSE, color = "green") +
labs(x = "% endring muskelmasse",
y = "% endring 1RM beinpress",
title = "Sammenheng endring muskelmasse og 1RM beinpress")
# Chunk 7
#| output: false
prosent_beinpress_gruppevis <- styrke |>
filter(exercise == "legpress") |>
pivot_wider(names_from = time,
values_from = load) |>
mutate(endring = (post - pre)*100/post) |>
select(participant, sex, sets, endring) |>
pivot_wider(names_from = sets,
values_from = endring) |>
summarise(single_m = mean(single, na.rm = TRUE),
multiple_m = mean(multiple, na.rm = TRUE),
single_sd = sd(single, na.rm = TRUE),
multiple_sd = sd(multiple, na.rm = TRUE)) |>
print()
single_mean_beinpress <- round(prosent_beinpress_gruppevis$single_m, 1)
single_sd_beinpress <- round(prosent_beinpress_gruppevis$single_sd, 1)
multiple_m_beinpress <- round(prosent_beinpress_gruppevis$multiple_m, 1)
multiple_sd_beinpress <- round(prosent_beinpress_gruppevis$multiple_sd, 1)
results_change_beinpress_single <- paste0(single_mean_beinpress,
" \u00B1 ",
single_sd_beinpress)
results_change_beinpress_multiple <- paste0(multiple_m_beinpress,
" \u00B1 ",
multiple_sd_beinpress)
## Kneekstensjon
prosent_kneekstensjon_gruppevis <- styrke |>
filter(exercise == "legext") |>
pivot_wider(names_from = time,
values_from = load) |>
mutate(endring = (post - pre)*100/post) |>
select(participant, sex, sets, endring) |>
pivot_wider(names_from = sets,
values_from = endring) |>
summarise(single_m = mean(single, na.rm = TRUE),
multiple_m = mean(multiple, na.rm = TRUE),
single_sd = sd(single, na.rm = TRUE),
multiple_sd = sd(multiple, na.rm = TRUE)) |>
print()
single_mean_kneekstensjon <- round(prosent_kneekstensjon_gruppevis$single_m, 1)
single_sd_kneekstensjon <- round(prosent_kneekstensjon_gruppevis$single_sd, 1)
multiple_m_kneekstensjon <- round(prosent_kneekstensjon_gruppevis$multiple_m, 1)
multiple_sd_kneekstensjon <- round(prosent_kneekstensjon_gruppevis$multiple_sd, 1)
results_change_kneekstensjon_single <- paste0(single_mean_kneekstensjon,
" \u00B1 ",
single_sd_kneekstensjon)
results_change_kneekstensjon_multiple <- paste0(multiple_m_kneekstensjon,
" \u00B1 ",
multiple_sd_kneekstensjon)
## leanmass
prosent_leanmass_gruppevis <- leanmass |>
pivot_wider(names_from = time,
values_from = lean.mass) |>
mutate(change = (post - pre)*100/post) |>
select(participant, sex, sets, change) |>
pivot_wider(names_from = sets,
values_from = change) |>
summarise(single_m = mean(single, na.rm = TRUE),
multiple_m = mean(multiple, na.rm = TRUE),
single_sd = sd(single, na.rm = TRUE),
multiple_sd = sd(multiple, na.rm = TRUE)) |>
print()
single_mean_leanmass <- round(prosent_leanmass_gruppevis$single_m, 1)
single_sd_leanmass <- round(prosent_leanmass_gruppevis$single_sd, 1)
multiple_mean_leanmass <- round(prosent_leanmass_gruppevis$multiple_m, 1)
multiple_sd_leanmass <- round(prosent_leanmass_gruppevis$multiple_sd, 1)
results_change_leanmass_single <- paste0(single_mean_leanmass,
" \u00B1 ",
single_sd_leanmass)
results_change_leanmass_multiple <- paste0(multiple_mean_leanmass,
" \u00B1 ",
multiple_sd_leanmass)
prosent_leanmass_gruppevis <- leanmass |>
pivot_wider(names_from = time,
values_from = lean.mass) |>
mutate(change = (post - pre)*100/post) |>
select(participant, sex, sets, change) |>
pivot_wider(names_from = sets,
values_from = change) |>
summarise(single_m = mean(single, na.rm = TRUE),
multiple_m = mean(multiple, na.rm = TRUE),
single_sd = sd(single, na.rm = TRUE),
multiple_sd = sd(multiple, na.rm = TRUE)) |>
print()
