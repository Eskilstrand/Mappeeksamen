pull(differences)
p_onetailed <- length(extreme_diffs) / 1000
## Calculate a p-value for a two-tailed test
extreme_diffs <- data.frame(differences) |>
filter(abs(differences) >= mean(a) - mean(b)) |>
pull(differences)
p_twotailed <- length(extreme_diffs) / 1000
# Chunk 4
library(tidyverse)
set.seed(1)
differences_small <- vector()
for(i in 1:1000) {
samp <- sample(c(a, b), 10, replace = FALSE)
differences_small[i] <- mean(samp[1:5]) - mean(samp[6:10])
}
data.frame(differences_small) %>%
ggplot(aes(differences_small)) + geom_histogram() +
geom_vline(xintercept = mean(a) - mean(b), color = "red", size = 2)
# One-tailed p-value
extreme_diffs_small <- data.frame(differences_small) |>
filter(differences_small >= mean(a) - mean(b)) |>
pull(differences_small)
p_onetailed_small <- length(extreme_diffs_small) / 1000
# Two-tailed p-value
extreme_diffs_small <- data.frame(differences_small) |>
filter(abs(differences_small) >= mean(a) - mean(b)) |>
pull(differences_small)
p_twotailed_small <- length(extreme_diffs_small) / 1000
# Chunk 5
library(tidyverse)
set.seed(1)
differences_large <- vector()
for(i in 1:1000) {
samp <- sample(c(a, b), 100, replace = FALSE)
differences_large[i] <- mean(samp[1:50]) - mean(samp[51:100])
}
data.frame(differences_large) %>%
ggplot(aes(differences_large)) + geom_histogram() +
geom_vline(xintercept = mean(a) - mean(b), color = "red", size = 2)
# One-tailed p-value
extreme_diffs_large <- data.frame(differences_large) |>
filter(differences_large >= mean(a) - mean(b)) |>
pull(differences_large)
p_onetailed_large <- length(extreme_diffs_large) / 1000
# Two-tailed p-value
extreme_diffs_large <- data.frame(differences_large) |>
filter(abs(differences_large) >= mean(a) - mean(b)) |>
pull(differences_large)
p_twotailed_large <- length(extreme_diffs_large) / 1000
ggplot(aes(samp1)) +
geom_histogram()
setwd("~/01-R Studio projects/Mappeeksamen")
#| code-fold: true
#| message: false
#| warning: false
# Create data frames to store the model estimates
results_8 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 8)
results_40 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 40)
# A for loop used to sample 1000 studies, each iteration (i) will draw a new sample
# from the population.
for(i in 1:1000) {
# Draw a sample
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
# Model the data
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
# Extract values from the models
results_8[i, 1] <- coef(summary(m1))[1, 1]
results_8[i, 2] <- coef(summary(m1))[1, 2]
results_8[i, 3] <- coef(summary(m1))[1, 4]
results_40[i, 1] <- coef(summary(m2))[1, 1]
results_40[i, 2] <- coef(summary(m2))[1, 2]
results_40[i, 3] <- coef(summary(m2))[1, 4]
}
# Save the results in a combined data frame
results <- bind_rows(results_8, results_40)
#| code-fold: true
#| message: false
#| warning: false
# Create data frames to store the model estimates
results_8 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 8)
results_40 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 40)
# A for loop used to sample 1000 studies, each iteration (i) will draw a new sample
# from the population.
for(i in 1:1000) {
# Draw a sample
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
# Model the data
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
# Extract values from the models
results_8[i, 1] <- coef(summary(m1))[1, 1]
results_8[i, 2] <- coef(summary(m1))[1, 2]
results_8[i, 3] <- coef(summary(m1))[1, 4]
results_40[i, 1] <- coef(summary(m2))[1, 1]
results_40[i, 2] <- coef(summary(m2))[1, 2]
results_40[i, 3] <- coef(summary(m2))[1, 4]
}
# Save the results in a combined data frame
results <- bind_rows(results_8, results_40)
# Calculate standard deviation of the estimate and the average of the standard error (se)
results_summary <- results |>
group_by(n) |>
summarise(
sd_estimate = sd(estimate),
avg_se = mean(se)
)
print(results_summary)
avg_se(n = 8)
sd_est_8 <- sd(results$estimate[results$n == 8])
avg_se_8 <- mean(results$se[results$n == 8])
sd_est_40 <- sd(results$estimate[results$n == 8])
sd_est_40 <- sd(results$estimate[results$n == 40])
avg_se_40 <- mean(results$se[results$n == 40])
rounded_sd_est_8 <- round(sd_est_8, 2)
rounded_avg_se_8 <- round(avg_se_8, 2)
rounded_sd_est_40 <- round(sd_est_40, 2)
rounded_avg_se_40 <- round(avg_se_40, 2)
ggplot(results[results$n == 8, ], aes(x = pval)) +
geom_histogram(binwidth == 0.05, fill = "green", alpha = 0.6) +
labs(title = "P-verdier fordeling til samplesize 8",
x = "P-verdier",
y = "frekvens")
ggplot(results[results$n == 8, ], aes(x = pval)) +
geom_histogram(binwidth == 0.05, fill = "green", alpha = 0.6) +
labs(title = "P-verdier fordeling til samplesize 8",
x = "P-verdier",
y = "frekvens")
library(ggplot2)
ggplot(results[results$n == 8, ], aes(x = pval)) +
geom_histogram(binwidth == 0.05, fill = "green", alpha = 0.6) +
labs(title = "P-verdier fordeling til samplesize 8",
x = "P-verdier",
y = "frekvens")
?histogram_binwidth
?geom_histogram(binwidth)
ggplot(results[results$n == 8, ], aes(x = pval)) +
geom_histogram(binwidth = 0.05, fill = "green", alpha = 0.6) +
labs(title = "P-verdier fordeling til samplesize 8",
x = "P-verdier",
y = "frekvens")
ggplot(results[results$n == 40, ], aes(x = pval)) +
geom_histogram(binwidth = 0.05, fill = "green", alpha = 0.6) +
labs(title = "P-verdier fordeling til samplesize 40",
x = "P-verdier",
y = "frekvens")
ggplot(results[results$n == 40, ], aes(x = pval)) +
geom_histogram(binwidth = 0.05, fill = "green", alpha = 0.6) +
labs(title = "P-verdier fordeling til samplesize 40",
x = "P-verdier",
y = "frekvens") +
theme_minimal()
ggplot(results[results$n == 40, ], aes(x = pval)) +
geom_histogram(binwidth = 0.05, fill = "green", alpha = 0.6) +
labs(title = "P-verdier fordeling til samplesize 40",
x = "P-verdier",
y = "frekvens") +
theme_classic()
ggplot(results[results$n == 8, ], aes(x = pval)) +
geom_histogram(binwidth = 0.05, fill = "green", alpha = 0.6) +
labs(title = "P-verdier fordeling til samplesize 8",
x = "P-verdier",
y = "frekvens") +
theme_minimal()
significant <- sum(results$pval[results$n == 8] < alpha)
significant_8 <- sum(results$pval[results$n == 8] < alpha)
significant_40 <- sum(results$pval[results$n == 40] < alpha)
alpha <- 0.05
significant_8 <- sum(results$pval[results$n == 8] < alpha)
significant_40 <- sum(results$pval[results$n == 40] < alpha)
significant_8
significant_40
library(pwr)
install.packages("pwr")
library(pwr)
effect_size <- 1.5 / 3
power_8 <- pwr.t.test(n = 8,
d = effect_size,
sig.level = alpha,
type = "one.sample")$power
power_40 <- pwr.t.test(n = 40,
d = effect_size,
sig.level = alpha,
type = "one.sample")$power
rounded_power_8 <- round(power_8, 3)
rounded_power_40 <- round(power 40, 3)
rounded_power_40 <- round(power_40, 3)
rounded_power_40_perc <- rounded_power_40 * 100
population <- rnorm(1000000, mean = 0, sd = 3)
# Create data frames to store the model estimates
results_8 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 8)
results_40 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 40)
# A for loop used to sample 1000 studies, each iteration (i) will draw a new sample
# from the population.
for(i in 1:1000) {
# Draw a sample
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
# Model the data
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
# Extract values from the models
results_8[i, 1] <- coef(summary(m1))[1, 1]
results_8[i, 2] <- coef(summary(m1))[1, 2]
results_8[i, 3] <- coef(summary(m1))[1, 4]
results_40[i, 1] <- coef(summary(m2))[1, 1]
results_40[i, 2] <- coef(summary(m2))[1, 2]
results_40[i, 3] <- coef(summary(m2))[1, 4]
}
# Save the results in a combined data frame
results_null <- bind_rows(results_8, results_40)
false_positive_8 <- sum(results_8$pval < alpha)
false_positive_40 <- sum(results_40$pval < alpha)
false_positive_8 <- sum(results_8$pval < 0.05)
false_positive_40 <- sum(results_40$pval < 0.05)
false_positive_8
false_positive_8_alpha0.025 <- sum(results_8$pval < 0.025)
false_positive_40_alpha0.025 <- sum(results_40$pval < 0.025)
false_positive_40_alpha0.025
sum(results_8$pval < 0.025)
sum(results_8$pval < 0.025)
sum(results_8$pval < 0.025)
sum(results_8$pval < 0.025)
# Chunk 1: "Standardscript for pakker"
#| echo: false
#| label: "Standardscript for pakker"
#| warning: false
#| message: false
library(readxl)
library(tidyr)
library(exscidata)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(magrittr)
library(gt)
library(ggtext)
library(pwr)
# Chunk 2
#| code-fold: true
set.seed(1)
population <- rnorm(1000000, mean = 1.5, sd = 3)
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
summary(m1)
summary(m2)
# Chunk 3
#| code-fold: true
#| message: false
#| warning: false
# Create data frames to store the model estimates
results_8 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 8)
results_40 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 40)
# A for loop used to sample 1000 studies, each iteration (i) will draw a new sample
# from the population.
for(i in 1:1000) {
# Draw a sample
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
# Model the data
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
# Extract values from the models
results_8[i, 1] <- coef(summary(m1))[1, 1]
results_8[i, 2] <- coef(summary(m1))[1, 2]
results_8[i, 3] <- coef(summary(m1))[1, 4]
results_40[i, 1] <- coef(summary(m2))[1, 1]
results_40[i, 2] <- coef(summary(m2))[1, 2]
results_40[i, 3] <- coef(summary(m2))[1, 4]
}
# Save the results in a combined data frame
results <- bind_rows(results_8, results_40)
# Calculate standard deviation of the estimate and the average of the standard error (se)
results_summary <- results |>
group_by(n) |>
summarise(
sd_estimate = sd(estimate),
avg_se = mean(se)
)
print(results_summary)
sd_est_8 <- sd(results$estimate[results$n == 8])
avg_se_8 <- mean(results$se[results$n == 8])
sd_est_40 <- sd(results$estimate[results$n == 40])
avg_se_40 <- mean(results$se[results$n == 40])
rounded_sd_est_8 <- round(sd_est_8, 2)
rounded_avg_se_8 <- round(avg_se_8, 2)
rounded_sd_est_40 <- round(sd_est_40, 2)
rounded_avg_se_40 <- round(avg_se_40, 2)
# Chunk 4: "P-verdi histogram SS8"
#| code-fold: true
#| label: "P-verdi histogram SS8"
ggplot(results[results$n == 8, ], aes(x = pval)) +
geom_histogram(binwidth = 0.05, fill = "green", alpha = 0.6) +
labs(title = "P-verdier fordeling til samplesize 8",
x = "P-verdier",
y = "frekvens") +
theme_minimal()
# Chunk 5: "P-verdi histogram SS40"
#| code-fold: true
#| label: "P-verdi histogram SS40"
ggplot(results[results$n == 40, ], aes(x = pval)) +
geom_histogram(binwidth = 0.05, fill = "green", alpha = 0.6) +
labs(title = "P-verdier fordeling til samplesize 40",
x = "P-verdier",
y = "frekvens") +
theme_classic()
# Chunk 6: "Calculate number of studies with stat signif"
#| code-fold: true
#| label: "Calculate number of studies with stat signif"
alpha <- 0.05
significant_8 <- sum(results$pval[results$n == 8] < alpha)
significant_40 <- sum(results$pval[results$n == 40] < alpha)
# Chunk 7: "Utregning av stat power"
#| code-fold: true
#| label: "Utregning av stat power"
effect_size <- 1.5 / 3
power_8 <- pwr.t.test(n = 8,
d = effect_size,
sig.level = alpha,
type = "one.sample")$power
rounded_power_8 <- round(power_8, 3)
power_40 <- pwr.t.test(n = 40,
d = effect_size,
sig.level = alpha,
type = "one.sample")$power
rounded_power_40 <- round(power_40, 3)
rounded_power_40_perc <- rounded_power_40 * 100
# Chunk 8: "Siste oppgave"
#| code-fold: true
#| label: "Siste oppgave"
population <- rnorm(1000000, mean = 0, sd = 3)
# Create data frames to store the model estimates
results_8 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 8)
results_40 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 40)
# A for loop used to sample 1000 studies, each iteration (i) will draw a new sample
# from the population.
for(i in 1:1000) {
# Draw a sample
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
# Model the data
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
# Extract values from the models
results_8[i, 1] <- coef(summary(m1))[1, 1]
results_8[i, 2] <- coef(summary(m1))[1, 2]
results_8[i, 3] <- coef(summary(m1))[1, 4]
results_40[i, 1] <- coef(summary(m2))[1, 1]
results_40[i, 2] <- coef(summary(m2))[1, 2]
results_40[i, 3] <- coef(summary(m2))[1, 4]
}
# Save the results in a combined data frame
results_null <- bind_rows(results_8, results_40)
# Chunk 9: "Falske positive"
#| code-fold: true
#| label: "Falske positive"
false_positive_8 <- sum(results_8$pval < 0.05)
false_positive_40 <- sum(results_40$pval < 0.05)
false_positive_8_alpha0.025 <- sum(results_8$pval < 0.025)
false_positive_40_alpha0.025 <- sum(results_40$pval < 0.025)
false_positive_8 <- sum(results_8$pval < 0.05)
false_positive_40 <- sum(results_40$pval < 0.05)
false_positive_8_alpha0.025 <- sum(results_8$pval < 0.025)
false_positive_40_alpha0.025 <- sum(results_40$pval < 0.025)
#| code-fold: true
#| label: "Siste oppgave"
set.seed(1)
population <- rnorm(1000000, mean = 0, sd = 3)
# Create data frames to store the model estimates
results_8 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 8)
results_40 <- data.frame(estimate = rep(NA, 1000),
se = rep(NA, 1000),
pval = rep(NA, 1000),
n = 40)
# A for loop used to sample 1000 studies, each iteration (i) will draw a new sample
# from the population.
for(i in 1:1000) {
# Draw a sample
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))
# Model the data
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)
# Extract values from the models
results_8[i, 1] <- coef(summary(m1))[1, 1]
results_8[i, 2] <- coef(summary(m1))[1, 2]
results_8[i, 3] <- coef(summary(m1))[1, 4]
results_40[i, 1] <- coef(summary(m2))[1, 1]
results_40[i, 2] <- coef(summary(m2))[1, 2]
results_40[i, 3] <- coef(summary(m2))[1, 4]
}
# Save the results in a combined data frame
results_null <- bind_rows(results_8, results_40)
#| code-fold: true
#| label: "Falske positive"
false_positive_8 <- sum(results_8$pval < 0.05)
false_positive_40 <- sum(results_40$pval < 0.05)
false_positive_8_alpha0.025 <- sum(results_8$pval < 0.025)
false_positive_40_alpha0.025 <- sum(results_40$pval < 0.025)
#| echo: false
#| label: "Standardscript for pakker"
#| warning: false
#| message: false
library(readxl)
library(tidyr)
library(exscidata)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(magrittr)
library(gt)
library(ggtext)
library(pwr)
df <- read_xls("data/qPCR.xls")
glimpse(df)
view(df)
glimpse(df)
df <- read_xls("data/qPCR.xls")
glimpse(df)
df <- read_xls("data/qPCR.xls")
df <- read_xlsx("data/qPCR.xlsx")
view(df)
df |>
select(Ct1...3:Average...11) |>
print()
df |>
select(Ct1...3:Average...11) |>
mutate(deltaCt = Average...6 - Average...11) |>
print()
df |>
select(Ct1...3:Average...11) |>
mutate(deltaCt = Average...6 - Average...11) |>
gt()
df |>
select(Ct1...3:Average...11) |>
mutate(deltaCt = Average...6 - Average...11) |>
fmt_number(decimals = 3) |>
gt()
df |>
select(Ct1...3:Average...11) |>
mutate(deltaCt = Average...6 - Average...11) |>
gt() |>
fmt_number(decimals = 3)
df |>
select(Ct1...3:Average...11) |>
mutate(deltaCt = Average...6 - Average...11) |>
mutate(to-deltadelta = 2^-deltaCt) |>
install.packages("lme4")
library(lme4)
lmer(reaction ~ days + (1 Days|Subject),
lmer(reaction ~ Days + (1 Days|Subject),
lmer(Reaction ~ Days + (1 Days|Subject),
library(tidyverse)
lmer(Reaction ~ Days + (1 Days|Subject),
dat <- sleepstudy |>
filter(Days >= 2)
dat |>
ggplot(aes(Days, Reaction)) +
geom_point() +
facet_wrap(~ Subject)
dat |>
ggplot(aes(Days, Reaction)) +
geom_point(shape = 21, fill = "lightblue") +
facet_wrap(~ Subject)
dat |>
ggplot(aes(Days, Reaction)) +
geom_point(shape = 21, fill = "blue") +
facet_wrap(~ Subject)
# Fitting a model with a varying intercept
m1 <- lmer(Reaction ~ Days + (1 Days|Subject),
# Fitting a model with a varying intercept
m1 <- lmer(Reaction ~ Days + (1 Days|Subject),
# Fitting a model with a varying intercept
m1 <- lmer(Reaction ~ Days + (1|Subject),
data = dat)
